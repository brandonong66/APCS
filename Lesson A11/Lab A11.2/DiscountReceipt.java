/**
 * Simulates the receipt of discounted items generated by a clerk
 * @author Brandon Ong
 * period 3
 *
 */
public class DiscountReceipt extends GroceryReceipt {
	private boolean preferred;//Receipt is for a preferred customer or not
	private int discountCount;//Number of discounted items
	private double discountAmount;//Total discount

	/**
	 * Initializes the clerk to the passed in employee,
	 * the receipt to an empty string, total, internalDiscount to 0
	 * and the preferred flag to the passed in value
	 * @param clerk - employee gnerating this receipt
	 * @param preferred - true if the receipt is for a preferred customer,
	 * 					  false otherwise. Only preferred customers would
	 * 					  get a discount.
	 */
	public DiscountReceipt(Employee clerk, boolean preferred) {
		//Your code goes here
		super(clerk);
		this.preferred=preferred;
	}
    
    /**
     * Returns the number of discounted items
     * @return discount count
     */
	public int getDiscountCount() {
		//Your code goes here
		return discountCount;
	}
    /**
     * Returns the total discounted amount
     * @return total discounted amount
     */
	public double getDiscountAmount() {
		//Your code goes here
		return discountAmount;
	}
	/**
     * If the receipt is for a preferred customer and the item is discounted,
     * updates the discount count and the discount amount. Then it adds the item
     * to the receipt
     */
	@Override
	public void add(Item i) {
		//Your code goes here
		super.add(i);
		if(preferred&&i.getDiscount()>0)
		{
		   discountAmount+=i.getDiscount();
		   discountCount++;
		}
	}
	/**
	 * Returns the net price after discount
	 * @return net price after discount
	 */
	public double getTotal() {
		//Your code goes here
		return super.getTotal();
	}
    /**
     * Calculates and returns the percent discount
     * @return discount percent
     */
	public double getDiscountPercent() {
		//Your code goes here
		return getDiscountAmount()/getTotal();
	}
	/**
	 * Returns a string with list of items (one per line), total receipt amount, total
	 * discount amount, number of discounted items, percent discount and total amount 
	 * after discount
	 * @return a string of list of items with discounted price information
	 */
	public String toString() {
		//Your code goes here
		return getReceipt()+"\nSub-Total: $"+super.getTotal()
		+"\nDiscount: $"+super.valueToString(getDiscountAmount())
		+"\nNumber of discounted items: "+getDiscountCount()
		+"\nDiscount percent: "+super.valueToString((getDiscountPercent()*10000.0)/100.0)
		+"%\nTotal: $"+super.valueToString(getTotal()-getDiscountAmount());
	}
}
