/**
 * Simulates a grocery receipt generated by a clerk
 * @author Brandon Ong
 * period 3
 *
 */
public class GroceryReceipt {
	private Employee clerk;//Employee object representing the clerk generating the receipt
	private String receipt;//List of items
	private double total;//Total price
	
	/**
	 * Initializes the clerk to the passed in employee,
	 * the receipt to an empty string and total to 0
	 * @param clerk - employee generating this receipt
	 */
	public GroceryReceipt(Employee clerk) {
		//Your code goes here
		this.clerk=clerk;
		receipt="";
		total =0;
	}
	
	/**
	 * Returns the total amount on this receipt in dollars and cents
	 * @return total amount
	 */
	public double getTotal() {
		//Your code goes here
		return total;
	}
	/**
	 * Returns the clerk generating the information
	 * @return clerk 
	 */
	public Employee getClerk() {
		//Your code goes here
		return clerk;
	}
	/**
	 * Returns the list of items
	 * @return receipt
	 */
	public String getReceipt() {
		//Your code goes here
		return receipt;
	}
	/**
	 * Adds the given item to the receipt
	 * Updates the total by adding in the the items price
	 * @param i - grocery item to be added
	 */
	public void add(Item i)
	{
		//Your code goes here
		receipt+=i.toString();
		total+=i.getPrice();
	}
	
	/**
	 * Returns the value passed as a string in the dollar and cents format ####.##
	 * @param value - value to be converted to dollar and cents format
	 * @return String in dollar and cents format
	 */
	public String valueToString(double value) {
		//Your code goes here
		String n=""+Math.round(value*100.00)/100.0;
		if (n.substring(n.indexOf(".")).length()<3)
		n=n+"0";
		return n;
	}
	
	/**
	 * Returns a string with list of items (one per line) and total receipt amount
	 * @return a string with list of items and total receipt amount
	 */
	
	public String toString() {
		//Your code goes here
		return receipt+"\nTotal: $"+valueToString(getTotal());
	}
	
}
